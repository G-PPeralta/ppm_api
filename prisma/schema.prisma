generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Atividade {
  id                     Int              @id @default(autoincrement())
  nomeAtividade          String           @map("nome_atividade") @db.VarChar(45)
  tipoAtividade          String           @map("tipo_atividade") @db.VarChar(45)
  dataInicio             DateTime         @map("data_inicio") @db.Date
  dataFim                DateTime         @map("data_fim") @db.Date
  dataConclusao          DateTime?        @map("data_conclusao") @db.Date
  statusId               Int              @map("status_id")
  macroatividadeId       Int?             @map("macroatividade_id")
  projetoId              Int              @map("projeto_id")
  indNaoIniciarAntesDe   Boolean          @default(false) @map("ind_nao_iniciar_antes_de") @db.Boolean
  indNaoTerminarDepoisDe Boolean          @default(false) @map("ind_nao_terminar_depois_de") @db.Boolean
  indMaisBrevePossivel   Boolean          @default(false) @map("ind_mais_breve_possivel") @db.Boolean
  dataRestricaoInicio    DateTime?        @map("data_restricao_inicio") @db.Date
  dataRestricaoDepois    DateTime?        @map("data_restricao_depois") @db.Date
  responsavelId          Int              @map("responsavel_id")
  macroatividade         Atividade?       @relation("MacroatividadeAtividades", fields: [macroatividadeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_atividades_tb_atividades1")
  projetos               Projeto          @relation(fields: [projetoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_atividades_tb_projetos1")
  responsavel            User             @relation(fields: [responsavelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_atividades_tb_usuarios1")
  statusAtividade        StatusAtividade  @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_macroatividade_tb_status_acoes1")
  atividades             Atividade[]      @relation("MacroatividadeAtividades")
  atividadePredecessor   AtivPredecessor? @relation("AtividadePredecessor")
  predecessorAtividade   AtivPredecessor? @relation("PredecessorAtividade")
  projAtvHistorico       AtvHistorico[]

  @@map("tb_atividades")
}

model ClassificacaoProjeto {
  id            Int       @id @default(autoincrement())
  classificacao String    @db.VarChar(45)
  projetos      Projeto[]

  @@map("tb_classificacoes_projetos")
}

model Complexidade {
  id           Int       @id @default(autoincrement())
  complexidade String    @db.VarChar(45)
  projetos     Projeto[]

  @@map("tb_complexidades")
}

model Demanda {
  id       Int       @id @default(autoincrement())
  demanda  String    @db.VarChar(45)
  projetos Projeto[]

  @@map("tb_demandas")
}

model DivisaoProjeto {
  id       Int       @id @default(autoincrement())
  divisao  String    @db.VarChar(45)
  projetos Projeto[]

  @@map("tb_divisoes_projetos")
}

model Gate {
  id       Int       @id @default(autoincrement())
  gate     String    @db.VarChar(45)
  projetos Projeto[]

  @@map("tb_gates")
}

model Local {
  id       Int       @id @default(autoincrement())
  local    String    @db.VarChar(45)
  projetos Projeto[]

  @@map("tb_locais")
}

model Log {
  id   Int      @id @default(autoincrement())
  log  Json
  data DateTime @default(dbgenerated("timezone('gmt3'::text, now())")) @db.Timestamp(6)

  @@map("tb_logs")
}

model Polo {
  id       Int       @id @default(autoincrement())
  polo     String    @db.VarChar(45)
  projetos Projeto[]

  @@map("tb_polos")
}

model PrioridadeProjeto {
  id         Int       @id @default(autoincrement())
  prioridade String    @db.VarChar(45)
  projetos   Projeto[]

  @@map("tb_prioridades_projetos")
}

model AtivPredecessor {
  atividadeId   Int       @map("atividade_id")
  predecessorId Int       @map("predecessor_id")
  atividade     Atividade @relation("AtividadePredecessor", fields: [atividadeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_proj_ativ_predecessor_tb_atividades1")
  predecessor   Atividade @relation("PredecessorAtividade", fields: [predecessorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_proj_ativ_predecessor_tb_atividades2")

  @@id([atividadeId, predecessorId])
  @@map("tb_proj_ativ_predecessor")
}

model AtvHistorico {
  id            Int       @id @default(autoincrement())
  descricao     String    @db.VarChar(255)
  dataHistorico DateTime? @map("data_historico") @db.Date
  atividadeId   Int       @map("atividade_id")
  atividade     Atividade @relation(fields: [atividadeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_proj_atv_historico_tb_atividades1")

  @@map("tb_proj_atv_historico")
}

model Projeto {
  id                   Int                   @id @default(autoincrement())
  nomeProjeto          String                @map("nome_projeto") @db.VarChar(100)
  descricao            String?               @db.VarChar(255)
  justificativa        String?               @db.VarChar(255)
  valorTotalPrevisto   Float?                @map("valor_total_previsto") @db.Real
  dataInicio           DateTime              @map("data_inicio") @db.Date
  dataFim              DateTime              @map("data_fim") @db.Date
  poloId               Int                   @map("polo_id")
  localId              Int                   @map("local_id")
  solicitanteId        Int                   @map("solicitante_id")
  classificacaoId      Int?                  @map("classificacao_id")
  divisaoId            Int                   @map("divisao_id")
  gateId               Int?                  @map("gate_id")
  tipoProjetoId        Int                   @map("tipo_projeto_id")
  demandaId            Int?                  @map("demanda_id")
  statusId             Int                   @map("status_id")
  prioridadeId         Int                   @map("prioridade_id")
  complexidadeId       Int                   @map("complexidade_id")
  dataInicioReal       DateTime?             @map("dataInicio_real") @db.Date
  dataFimReal          DateTime?             @map("dataFim_real") @db.Date
  comentarios          String?               @db.VarChar(255)
  classificacaoProjeto ClassificacaoProjeto? @relation(fields: [classificacaoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_classificacao_projetos1")
  complexidade         Complexidade          @relation(fields: [complexidadeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_complexidade1")
  demanda              Demanda?              @relation(fields: [demandaId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_demandas1")
  divisaoProjeto       DivisaoProjeto        @relation(fields: [divisaoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_divis√£o_projetos1")
  gate                 Gate?                 @relation(fields: [gateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_gates1")
  local                Local                 @relation(fields: [localId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_locais1")
  polo                 Polo                  @relation(fields: [poloId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_polos1")
  prioridadeProjeto    PrioridadeProjeto     @relation(fields: [prioridadeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_prioridade_projeto1")
  solicitanteProjeto   SolicitanteProjeto    @relation(fields: [solicitanteId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_departamentos1")
  statusProjeto        StatusProjeto         @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_status_projeto1")
  tipoProjeto          TipoProjeto           @relation(fields: [tipoProjetoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tb_projetos_tb_tipos_projeto1")
  atividades           Atividade[]

  @@map("tb_projetos")
}

model Role {
  id       Int    @id @default(autoincrement())
  role     String @db.VarChar
  nomeRole String @map("nome_role") @db.VarChar(50)
  usuarios User[]

  @@map("tb_roles")
}

model SolicitanteProjeto {
  id          Int       @id @default(autoincrement())
  solicitante String    @db.VarChar(45)
  projetos    Projeto[]

  @@map("tb_solicitantes_projetos")
}

model StatusAtividade {
  id         Int         @id @default(autoincrement())
  status     String      @db.VarChar(45)
  atividades Atividade[]

  @@map("tb_status_atividade")
}

model StatusProjeto {
  id       Int       @id @default(autoincrement())
  status   String    @db.VarChar(45)
  projetos Projeto[]

  @@map("tb_status_projetos")
}

model TipoProjeto {
  id       Int       @id @default(autoincrement())
  tipo     String    @db.VarChar(45)
  projetos Projeto[]

  @@map("tb_tipos_projeto")
}

model User {
  id          Int         @id @default(autoincrement())
  nome        String      @db.VarChar
  email       String      @unique @db.VarChar
  senha       String      @db.VarChar
  telefone    String      @db.VarChar
  areaAtuacao String      @map("area_atuacao") @db.VarChar
  roleId      Int         @default(2) @map("role_id")
  role        Role        @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_id_fk")
  atividades  Atividade[]

  @@map("tb_usuarios")
}
